{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport PatternParser from './AsYouTypeFormatter.PatternParser.js';\n\nvar PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    _classCallCheck(this, PatternMatcher);\n\n    this.matchTree = new PatternParser().parse(pattern);\n  }\n\n  _createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          allowOverflow = _ref.allowOverflow;\n\n      if (!string) {\n        throw new Error('String is required');\n      }\n\n      var result = _match(string.split(''), this.matchTree, true);\n\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return PatternMatcher;\n}();\n/**\r\n * Matches `characters` against a pattern compiled into a `tree`.\r\n * @param  {string[]} characters\r\n * @param  {Tree} tree — A pattern compiled into a `tree`. See the `*.d.ts` file for the description of the `tree` structure.\r\n * @param  {boolean} last — Whether it's the last (rightmost) subtree on its level of the match tree.\r\n * @return {object} See the `*.d.ts` file for the description of the result object.\r\n */\n\n\nexport { PatternMatcher as default };\n\nfunction _match(characters, tree, last) {\n  // If `tree` is a string, then `tree` is a single character.\n  // That's because when a pattern is parsed, multi-character-string parts\n  // of a pattern are compiled into arrays of single characters.\n  // I still wrote this piece of code for a \"general\" hypothetical case\n  // when `tree` could be a string of several characters, even though\n  // such case is not possible with the current implementation.\n  if (typeof tree === 'string') {\n    var characterString = characters.join('');\n\n    if (tree.indexOf(characterString) === 0) {\n      // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore else */\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      } // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore next */\n\n\n      return {\n        partialMatch: true // matchedChars: characters\n\n      };\n    }\n\n    if (characterString.indexOf(tree) === 0) {\n      if (last) {\n        // The `else` path is not possible because `tree` is always a single character.\n        // The `else` case for `characters.length > tree.length` would be\n        // `characters.length <= tree.length` which means `characters.length <= 1`.\n        // `characters` array can't be empty, so that means `characters === [tree]`,\n        // which would also mean `tree.indexOf(characterString) === 0` and that'd mean\n        // that the `if (tree.indexOf(characterString) === 0)` condition before this\n        // `if` condition would be entered, and returned from there, not reaching this code.\n\n        /* istanbul ignore else */\n        if (characters.length > tree.length) {\n          return {\n            overflow: true\n          };\n        }\n      }\n\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n\n    return;\n  }\n\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n\n    while (i < tree.length) {\n      var subtree = tree[i];\n\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n\n      if (!result) {\n        return;\n      } else if (result.overflow) {\n        return result;\n      } else if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n\n            };\n          }\n        }\n      } else {\n        /* istanbul ignore else */\n        if (result.partialMatch) {\n          return {\n            partialMatch: true // matchedChars: characters\n\n          };\n        } else {\n          throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n        }\n      }\n\n      i++;\n    } // If `last` then overflow has already been checked\n    // by the last element of the `tree` array.\n\n    /* istanbul ignore if */\n\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(tree.args), _step; !(_step = _iterator()).done;) {\n        var branch = _step.value;\n\n        var _result = _match(characters, branch, last);\n\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else {\n            /* istanbul ignore else */\n            if (_result.partialMatch) {\n              partialMatch = true;\n            } else {\n              throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(_result, null, 2)));\n            }\n          }\n        }\n      }\n\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n\n        };\n      } // Not even a partial match.\n\n\n      return;\n\n    case '[]':\n      for (var _iterator2 = _createForOfIteratorHelperLoose(tree.args), _step2; !(_step2 = _iterator2()).done;) {\n        var _char = _step2.value;\n\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n\n      return;\n\n    /* istanbul ignore next */\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}","map":{"version":3,"sources":["../source/AsYouTypeFormatter.PatternMatcher.js"],"names":["PatternMatcher","allowOverflow","result","match","string","characterString","characters","tree","matchedChars","partialMatch","overflow","Array","restCharacters","i","subtree","last","JSON","branch","char"],"mappings":"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","sourcesContent":["import PatternParser from './AsYouTypeFormatter.PatternParser.js'\r\n\r\nexport default class PatternMatcher {\r\n\tconstructor(pattern) {\r\n\t\tthis.matchTree = new PatternParser().parse(pattern)\r\n\t}\r\n\r\n\tmatch(string, { allowOverflow } = {}) {\r\n\t\tif (!string) {\r\n\t\t\tthrow new Error('String is required')\r\n\t\t}\r\n\t\tconst result = match(string.split(''), this.matchTree, true)\r\n\t\tif (result && result.match) {\r\n\t\t\tdelete result.matchedChars\r\n\t\t}\r\n\t\tif (result && result.overflow) {\r\n\t\t\tif (!allowOverflow) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n}\r\n\r\n/**\r\n * Matches `characters` against a pattern compiled into a `tree`.\r\n * @param  {string[]} characters\r\n * @param  {Tree} tree — A pattern compiled into a `tree`. See the `*.d.ts` file for the description of the `tree` structure.\r\n * @param  {boolean} last — Whether it's the last (rightmost) subtree on its level of the match tree.\r\n * @return {object} See the `*.d.ts` file for the description of the result object.\r\n */\r\nfunction match(characters, tree, last) {\r\n\t// If `tree` is a string, then `tree` is a single character.\r\n\t// That's because when a pattern is parsed, multi-character-string parts\r\n\t// of a pattern are compiled into arrays of single characters.\r\n\t// I still wrote this piece of code for a \"general\" hypothetical case\r\n\t// when `tree` could be a string of several characters, even though\r\n\t// such case is not possible with the current implementation.\r\n\tif (typeof tree === 'string') {\r\n\t\tconst characterString = characters.join('')\r\n\t\tif (tree.indexOf(characterString) === 0) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (characters.length === tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmatch: true,\r\n\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn {\r\n\t\t\t\tpartialMatch: true,\r\n\t\t\t\t// matchedChars: characters\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (characterString.indexOf(tree) === 0) {\r\n\t\t\tif (last) {\r\n\t\t\t\t// The `else` path is not possible because `tree` is always a single character.\r\n\t\t\t\t// The `else` case for `characters.length > tree.length` would be\r\n\t\t\t\t// `characters.length <= tree.length` which means `characters.length <= 1`.\r\n\t\t\t\t// `characters` array can't be empty, so that means `characters === [tree]`,\r\n\t\t\t\t// which would also mean `tree.indexOf(characterString) === 0` and that'd mean\r\n\t\t\t\t// that the `if (tree.indexOf(characterString) === 0)` condition before this\r\n\t\t\t\t// `if` condition would be entered, and returned from there, not reaching this code.\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (characters.length > tree.length) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tmatch: true,\r\n\t\t\t\tmatchedChars: characters.slice(0, tree.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\tif (Array.isArray(tree)) {\r\n\t\tlet restCharacters = characters.slice()\r\n\t\tlet i = 0\r\n\t\twhile (i < tree.length) {\r\n\t\t\tconst subtree = tree[i]\r\n\t\t\tconst result = match(restCharacters, subtree, last && (i === tree.length - 1))\r\n\t\t\tif (!result) {\r\n\t\t\t\treturn\r\n\t\t\t} else if (result.overflow) {\r\n\t\t\t\treturn result\r\n\t\t\t} else if (result.match) {\r\n\t\t\t\t// Continue with the next subtree with the rest of the characters.\r\n\t\t\t\trestCharacters = restCharacters.slice(result.matchedChars.length)\r\n\t\t\t\tif (restCharacters.length === 0) {\r\n\t\t\t\t\tif (i === tree.length - 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti++\r\n\t\t}\r\n\t\t// If `last` then overflow has already been checked\r\n\t\t// by the last element of the `tree` array.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (last) {\r\n\t\t\treturn {\r\n\t\t\t\toverflow: true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tmatch: true,\r\n\t\t\tmatchedChars: characters.slice(0, characters.length - restCharacters.length)\r\n\t\t}\r\n\t}\r\n\r\n\tswitch (tree.op) {\r\n\t\tcase '|':\r\n\t\t\tlet partialMatch\r\n\t\t\tfor (const branch of tree.args) {\r\n\t\t\t\tconst result = match(characters, branch, last)\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tif (result.overflow) {\r\n\t\t\t\t\t\treturn result\r\n\t\t\t\t\t} else if (result.match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: result.matchedChars\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\t\t\tpartialMatch = true\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (partialMatch) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t// matchedChars: ...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Not even a partial match.\r\n\t\t\treturn\r\n\r\n\t\tcase '[]':\r\n\t\t\tfor (const char of tree.args) {\r\n\t\t\t\tif (characters[0] === char) {\r\n\t\t\t\t\tif (characters.length === 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\tmatchedChars: [char]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No character matches.\r\n\t\t\treturn\r\n\r\n\t\t/* istanbul ignore next */\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unsupported instruction tree: ${tree}`)\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}